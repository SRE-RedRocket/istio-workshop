---
apiVersion: v1
kind: Service
metadata:
  name: publicapp
  labels:
    app: publicapp
spec:
  ports:
  - port: 3000
    name: http
  selector:
    app: publicapp

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: publicapp-v1
spec:
  selector:
    matchLabels:
      app: publicapp
  replicas: 1
  template:
    metadata:
      labels:
        app: publicapp
        version: v1
    spec:
      containers:
      - name: publicapp
        command: ["python", "-u", "/public.py"]
        image: python:3.7-stretch
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        volumeMounts:
          - name: publiccode
            mountPath: "/public.py"
            subPath: "public.py"     
      volumes:
        - name: publiccode
          configMap:
            name: publiccode           

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: publicapp
spec:
  hosts:
  - publicapp
  http:
  - route:
    - destination:
        host: publicapp
        subset: v1
    timeout: 60s

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: publicapp
spec:
  host: publicapp
  subsets:
  - name: v1
    labels:
      version: v1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: publiccode
data:
  public.py: |
    #!/usr/bin/env python

    from http.server import BaseHTTPRequestHandler, HTTPServer
    from time import sleep
    import urllib.request

    PORT = 3000
    SLEEP_TIME = 0

    class testHTTPServer_RequestHandler(BaseHTTPRequestHandler):

        def do_GET(self):
            sleep(SLEEP_TIME)

            contents = urllib.request.urlopen("http://backend:4000").read()

            self.send_response(200)
            self.send_header('Content-type','text/html')
            self.end_headers()
            message = str(contents)

            self.wfile.write(bytes(message, "utf8"))
            return

    def run():
        print('starting server...')
        server_address = ('0.0.0.0', PORT)
        httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)
        print('running server...')
        httpd.serve_forever()

    run()
